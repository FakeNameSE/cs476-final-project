load ../apmaude

--- This is our core client server protocol. We are currently only modeling each client 
--- communicating with a single server. Clients send a sequence of data request messages 
--- of a predefined length to the server, waiting for a response between each one.
--- The client also sends a final disconnect message and waits for a response before
--- being truly done.
--- This is loosely modeled after a somewhat unidirectional TCP with the seq and ack.
mod CLIENT-SERVER is
    inc SCHEDULING .
    pr NAT .
    --- extending CONFIGURATION .

    sorts ClientId ServerId ClientConf ServerConf ClientObj ServerObj .
    subsorts ClientId ServerId < Oid .
    subsorts ClientConf ServerConf < Config .
    subsort ClientObj < ClientConf .
    subsort ServerObj < ServerConf .
    subsort Msg < ClientConf .
    subsort Msg < ServerConf .
    subsort Attributes < Payload .

    ops Client Server Attacker : -> ObjType [ctor] .
    --- ops C_ S_ A_ : Nat -> Oid [ctor] .
    op C_ : Nat -> ClientId [ctor] .
    op S_ : Nat -> ServerId [ctor] .
    --- op (to_,_from_) : Oid Attributes Oid -> Msg [ctor msg] .

    --- Attributes for client.
    op server:_ : ServerId -> Attribute [ctor gather (&)] .
    ops seq:_ ack:_ maxSeq:_ : Nat -> Attribute [ctor gather (&)] .
    op msgSeq:_ : Nat -> Attribute [ctor gather (&)] .
    op disconnect : -> Attribute [ctor] .
    
    op _in_ : Attribute Attributes -> Bool .

    op C<_:_|_> : ClientId ObjType Attributes -> ClientObj [ctor object] .
    op S<_:_|_> : ServerId ObjType Attributes -> ServerObj [ctor object] .
    op cnone : -> ClientConf [ctor] .
    op snone : -> ServerConf [ctor] .
    op _c;_ : ClientConf ClientConf -> ClientConf [ctor config assoc comm id: cnone] .
    op _s;_ : ServerConf ServerConf -> ServerConf [ctor config assoc comm id: snone] .

    var CLIENTID1 : ClientId .
    var SERVERID1 : ServerId .
    vars ATTRS1 ATTRS2 : Attributes .
    vars A B : Attribute .
    vars N1 N2 N3 : Nat .

    eq A in mt = false .
    eq A in (B, ATTRS1) = if A == B then true else A in ATTRS1 fi .

    --- crl [client-send] : C< CLIENTID1 : Client | server: SERVERID1, seq: N1, ack: N1, maxSeq: N2, ATTRS1 > => 
    ---     (to SERVERID1, (msgSeq: N1, (if N1 == N2 then disconnect else none fi)) from CLIENTID1) 
    --- c; C< CLIENTID1 : Client | server: SERVERID1, seq: N1 + 1, ack: N1, maxSeq: N2, ATTRS1 > if N1 <= N2 .

    *** Only takes the message if it is the next one, drops it otherwise.
    --- rl [client-rcv] : (to CLIENTID1, (msgSeq: N1, ATTRS2) from SERVERID1) c; C< CLIENTID1 : Client | server: SERVERID1, seq: N2, ack: N3, ATTRS1 > =>
    ---     if N1 == N3 then
    ---         C< CLIENTID1 : Client | server: SERVERID1, seq: N2, ack: N3 + 1, ATTRS1 > 
    ---     else 
    ---         C< CLIENTID1 : Client | server: SERVERID1, seq: N2, ack: N3, ATTRS1 > 
    ---     fi .

    --- rl [server-reply] : (to SERVERID1, ATTRS1 from CLIENTID1) s; S< SERVERID1 : Server | ATTRS2 > => (to CLIENTID1, ATTRS1 from SERVERID1) s; S< SERVERID1 : Server | ATTRS2 > .
endm

--- The underlying protocol purely wants to send and receive messages. This module is a wrapper
--- handling the DoS protection protocol so that the underlying protocol does not have to worry
--- about it. Here, we deal with sending connection requests for cookies and retries for the
--- client and responding to cookie requests and validating data (core protocol) requests
--- for the server.
mod PROTOCOL is
    protecting CLIENT-SERVER .

    sorts CStoredCookiePair Cookie WrappedClientId WrappedServerId MaliciousWrappedClientId .
    sorts NeList List ServerCookieElem .
    subsort ServerCookieElem < NeList < List .
    subsorts WrappedClientId WrappedServerId < Oid .
    subsort MaliciousWrappedClientId < WrappedClientId .
    subsort Cookie < Nat .

    ops WrappedClient WrappedServer Attacker : -> ObjType [ctor] .
    op wrapClientId : ClientId -> WrappedClientId [ctor] .
    op wrapServerId : ServerId -> WrappedServerId [ctor] .
    op (_,_) : ServerId Cookie -> CStoredCookiePair [ctor] .
    *** A pair of client and cookie.
    op cookieNone : -> CStoredCookiePair [ctor] .
    *** Bad naming, just the cookie.
    op noCookie : -> Cookie [ctor] . 
    *** Does this incorrectly get treated as a real message to deliver?
    op msgNone : -> Msg [ctor] . 
    op natToCookie : Nat -> Cookie [ctor] .

    op seed:_ : Nat -> Attribute [ctor gather (&)] .
    op pendingMsg:_ : Msg -> Attribute [ctor gather (&)] .
    op cookie:_ : CStoredCookiePair -> Attribute [ctor gather (&)] .
    *** Flag for client to send message once it has cookie.
    op sendMsg:_ : Bool -> Attribute [ctor gather (&)] .
    op setTimeout:_ : Bool -> Attribute [ctor gather (&)] .

    op storedCookies:_ : List -> Attribute [ctor gather (&)] .
    op maxCookies:_ : Nat -> Attribute [ctor gather (&)] .
    
    --- Attacker
    op A_ : Nat -> MaliciousWrappedClientId [ctor] .
    op msgsRemaining:_ : Nat -> Attribute [ctor gather (&)] .

    --- Extra message stuff.
    op (to_from_: connect) : WrappedServerId WrappedClientId -> Msg [ctor msg] .
    op (to_from_: accept with _) : WrappedClientId WrappedServerId Cookie -> Msg [ctor msg] .
    op (to_from_: timeout with _) : WrappedClientId WrappedClientId Attributes -> Msg [ctor msg] .
    op msgCookie:_ : Cookie -> Attribute [ctor gather (&)] .
    op clientConf:_ : ClientConf -> Attribute [ctor gather (&)] .
    op serverConf:_ : ServerConf -> Attribute [ctor gather (&)] .

    --- Server side list of cookies.
    op nil : -> List [ctor] . 
    op _;_ : List List -> List [assoc id: nil] .
    op _;_ : NeList NeList -> NeList [ctor assoc id: nil] .    
    op len : List -> Nat .
    op (_,_,_) : WrappedClientId Cookie Nat -> ServerCookieElem [ctor] .
    op sortedInsert : ServerCookieElem List -> NeList .
    op extractWeight : ServerCookieElem -> Nat .
    op _ _ in _ : WrappedClientId Cookie List -> Bool .
    op _ cIn _ : WrappedClientId List -> Cookie .
    op incWeight : WrappedClientId Cookie List -> List .
    op delCookieElem : WrappedClientId Cookie List -> List .
    op popMin : List -> List .

    var CLIENTID1 : ClientId .
    var SERVERID1 : ServerId .
    vars WRAPPEDCLIENTID1 WRAPPEDCLIENTID2 : WrappedClientId .
    var ATTACKERID : MaliciousWrappedClientId .
    var WRAPPEDSERVERID1 : WrappedServerId .
    var CCONF1 : ClientConf .
    var SCONF1 : ServerConf .
    vars K K1 : Cookie .
    var CLIENTCOOKIEPAIR : CStoredCookiePair .
    var MSG1 : Msg .
    vars ATTRS1 ATTRS2 ATTRS3 : Attributes .
    vars N1 N2 N3 : Nat .
    vars L Q COOKIELIST : List .
    vars E1 E2 : ServerCookieElem .
    vars B1 B2 : Bool .

    eq extractWeight((WRAPPEDCLIENTID1, K, N1)) = N1 .

    eq len(nil) = 0 .
    eq len(E1 ; L) = s(len(L)) .
    eq sortedInsert(E1, nil) = E1 .
    --- Assumes the list is already sorted.
    eq sortedInsert(E1, E2 ; L) = if extractWeight(E1) < extractWeight(E2) then E1 ; E2 ; L else E2 ; sortedInsert(E1, L) fi .

    eq WRAPPEDCLIENTID1 K in nil = false .
    eq WRAPPEDCLIENTID1 K in (WRAPPEDCLIENTID2, K1, N1) ; L = if (WRAPPEDCLIENTID1 == WRAPPEDCLIENTID2) and (K == K1) then true else WRAPPEDCLIENTID1 K in L fi .

    eq WRAPPEDCLIENTID1 cIn nil = noCookie .
    eq WRAPPEDCLIENTID1 cIn (WRAPPEDCLIENTID2, K1, N1) ; L = if (WRAPPEDCLIENTID1 == WRAPPEDCLIENTID2) then K1 else WRAPPEDCLIENTID1 cIn L fi .

    eq incWeight(WRAPPEDCLIENTID1, K, nil) = nil .
    --- Takes advantage of the list already being sorted to remove the element and reinsert it without two extra full passes.
    eq incWeight(WRAPPEDCLIENTID1, K, (WRAPPEDCLIENTID2, K1, N1) ; L) = if (WRAPPEDCLIENTID1 == WRAPPEDCLIENTID2) and (K == K1) then sortedInsert((WRAPPEDCLIENTID2, K1, s(N1)), L) else (WRAPPEDCLIENTID2, K1, N1) ; incWeight(WRAPPEDCLIENTID1, K, L) fi .

    eq delCookieElem(WRAPPEDCLIENTID1, K, nil) = nil .
    eq delCookieElem(WRAPPEDCLIENTID1, K, (WRAPPEDCLIENTID2, K1, N1) ; L) = if (WRAPPEDCLIENTID1 == WRAPPEDCLIENTID2) and (K == K1) then L else (WRAPPEDCLIENTID2, K1, N1) ; delCookieElem(WRAPPEDCLIENTID1, K, L) fi .

    --- Simple, but makes pattern matching later easier.
    eq popMin(nil) = nil .
    eq popMin(E1 ; L) = L .

    --- ======================== Lifted rules from core protocol. ========================
    crl [client-inner-send] : < wrapClientId(CLIENTID1) : WrappedClient | clientConf: (C< CLIENTID1 : Client | server: SERVERID1, seq: N1, ack: N1, maxSeq: N2, ATTRS1 > c; CCONF1), ATTRS2 > => 
        < wrapClientId(CLIENTID1) : WrappedClient | 
            clientConf: (C< CLIENTID1 : Client | server: SERVERID1, seq: N1 + 1, ack: N1, maxSeq: N2, ATTRS1 > c; 
                (to SERVERID1 from CLIENTID1 : (msgSeq: N1, (if N1 == N2 then disconnect else mt fi))) c; 
                CCONF1), 
            ATTRS2 >
    if N1 <= N2 .

    *** Only takes the message if it is the next one, drops it otherwise.
    rl [client-inner-rcv] : < wrapClientId(CLIENTID1) : WrappedClient | clientConf: ((to CLIENTID1 from SERVERID1 : (msgSeq: N1, ATTRS2)) c; C< CLIENTID1 : Client | server: SERVERID1, seq: N2, ack: N3, ATTRS1 > c; CCONF1), ATTRS3 > =>
        < wrapClientId(CLIENTID1) : WrappedClient | clientConf: (C< CLIENTID1 : Client | server: SERVERID1, seq: N2, 
            ack: if N1 == N3 then N3 + 1 else N3 fi, 
            ATTRS1 > 
        c; CCONF1), ATTRS3 > .

    rl [server-inner-reply] : < wrapServerId(SERVERID1) : WrappedServer | serverConf: ((to SERVERID1 from CLIENTID1 : ATTRS1) s; S< SERVERID1 : Server | ATTRS2 > s; SCONF1), ATTRS3 > =>
        < wrapServerId(SERVERID1) : WrappedServer | serverConf: ((to CLIENTID1 from SERVERID1 : ATTRS1) 
            s; S< SERVERID1 : Server | ATTRS2 > 
            s; SCONF1), 
        ATTRS3 > .

    --- ======================== Wrapper protocol rules. ========================
    --- Handles connect request when the underlying client protocol wants to send a new message. Asks server for a cookie.
    rl [client-send-new-connect] : < wrapClientId(CLIENTID1) : WrappedClient | cookie: cookieNone, pendingMsg: msgNone, sendMsg: B1, clientConf: (CCONF1 c; (to SERVERID1 from CLIENTID1 : ATTRS2)), ATTRS1 > =>
        (to wrapServerId(SERVERID1) from wrapClientId(CLIENTID1) : connect) 
        < wrapClientId(CLIENTID1) : WrappedClient | cookie: cookieNone, clientConf: CCONF1, pendingMsg: (to SERVERID1 from CLIENTID1 : ATTRS2), sendMsg: true, ATTRS1 > .

    --- This rule adds the server's accept response's cookie to the client. 
    --- It keeps things a little cleaner by ignoring spurious accepts (e.g. the client times out and sends a new connect request while its disconnect response is in flight).
    --- We do not have it send a new disconnect in that case because the new connect will have a priority of 1 and so will soon be deleted by the server without wasting a message.
    rl [client-rcv-connect] : (to WRAPPEDCLIENTID1 from wrapServerId(SERVERID1) : accept with K) < WRAPPEDCLIENTID1 : WrappedClient | pendingMsg: MSG1, cookie: CLIENTCOOKIEPAIR, ATTRS1 > =>
        < WRAPPEDCLIENTID1 : WrappedClient | 
            pendingMsg: MSG1,
            cookie: if MSG1 == msgNone then CLIENTCOOKIEPAIR else (SERVERID1, K) fi,
            ATTRS1 > .

    --- Handles sending data request when the underlying client wants to a new message and we already have a cookie.
    rl [client-send-new-data] : < wrapClientId(CLIENTID1) : WrappedClient | cookie: (SERVERID1, K), pendingMsg: msgNone, sendMsg: B1, setTimeout: B2, clientConf: (CCONF1 c; (to SERVERID1 from CLIENTID1 : ATTRS2)), ATTRS1 > =>
        (to wrapServerId(SERVERID1) from wrapClientId(CLIENTID1) : (ATTRS2, msgCookie: K)) 
        < wrapClientId(CLIENTID1) : WrappedClient | cookie: (SERVERID1, K), clientConf: CCONF1, pendingMsg: (to SERVERID1 from CLIENTID1 : ATTRS2), sendMsg: false, setTimeout: true, ATTRS1 > .

    --- When sendMsg is true and we have a pending message, this rule will send it once we have a cookie.
    rl [client-send-pending-data] : < wrapClientId(CLIENTID1) : WrappedClient | cookie: (SERVERID1, K), pendingMsg: (to SERVERID1 from CLIENTID1 : ATTRS2), sendMsg: true, setTimeout: B1, ATTRS1 > =>
        (to wrapServerId(SERVERID1) from wrapClientId(CLIENTID1) : (ATTRS2, msgCookie: K)) 
        < wrapClientId(CLIENTID1) : WrappedClient | cookie: (SERVERID1, K), pendingMsg: (to SERVERID1 from CLIENTID1 : ATTRS2), sendMsg: false, setTimeout: true, ATTRS1 > .

    --- --- Passes any message to the internal client (does not filter old ones) but clears pendingMsg if this is a response with the awaited sequence number.
    --- --- rl [client-rcv-data] : (to wrapClientId(CLIENTID1), (msgSeq: N1, ATTRS2) from wrapServerId(SERVERID1)) < wrapClientId(CLIENTID1) : WrappedClient | cookie: CLIENTCOOKIEPAIR, pendingMsg: MSG1, clientConf: CCONF1, ATTRS1 > => 
    --- ---     < wrapClientId(CLIENTID1) : WrappedClient | 
    --- ---         (if (MSG1 == (to SERVERID1, (msgSeq: N1, ATTRS2) from CLIENTID1)) then
    --- ---             cookie: (if disconnect in ATTRS2 then cookieNone else CLIENTCOOKIEPAIR fi), *** Delete our cookie if the server responded to our disconnect request.
    --- ---             pendingMsg: msgNone
    --- ---         else 
    --- ---             cookie: CLIENTCOOKIEPAIR,
    --- ---             pendingMsg: MSG1
    --- ---         fi),
    --- ---         clientConf: ((to CLIENTID1, (msgSeq: N1, ATTRS2) from SERVERID1) c; CCONF1),
    --- ---         ATTRS1 > .

    --- Passes response to pending message to the internal client and clears pendingMsg.
    --- Deletes our cookie if the server responded to our disconnect request.
    crl [client-rcv-pending-data] : (to wrapClientId(CLIENTID1) from wrapServerId(SERVERID1) : (msgSeq: N1, ATTRS2)) < wrapClientId(CLIENTID1) : WrappedClient | cookie: CLIENTCOOKIEPAIR, sendMsg: B1, pendingMsg: MSG1, clientConf: CCONF1, ATTRS1 > => 
        < wrapClientId(CLIENTID1) : WrappedClient | 
            cookie: (if disconnect in ATTRS2 then cookieNone else CLIENTCOOKIEPAIR fi),
            sendMsg: false,
            pendingMsg: msgNone,
            clientConf: ((to CLIENTID1 from SERVERID1 : (msgSeq: N1, ATTRS2)) c; CCONF1),
            ATTRS1 >
    if MSG1 == (to SERVERID1 from CLIENTID1 : (msgSeq: N1, ATTRS2)) .

    --- Passes non-pending responses to the internal client without filtering them.
    crl [client-rcv-nonpending-data] : (to wrapClientId(CLIENTID1) from wrapServerId(SERVERID1) : (msgSeq: N1, ATTRS2)) < wrapClientId(CLIENTID1) : WrappedClient | pendingMsg: MSG1, clientConf: CCONF1, ATTRS1 > => 
        < wrapClientId(CLIENTID1) : WrappedClient |
            pendingMsg: MSG1,
            clientConf: ((to CLIENTID1 from SERVERID1 : (msgSeq: N1, ATTRS2)) c; CCONF1),
            ATTRS1 >
    if MSG1 =/= (to SERVERID1 from CLIENTID1 : (msgSeq: N1, ATTRS2)) .

    --- Sents a timeout message back to itself when setTimeout is true.
    rl [client-set-timeout] : < wrapClientId(CLIENTID1) : WrappedClient | pendingMsg: (to SERVERID1 from CLIENTID1 : (msgSeq: N1, ATTRS2)), setTimeout: true, ATTRS1 > =>
        (to wrapClientId(CLIENTID1) from wrapClientId(CLIENTID1) : timeout with (msgSeq: N1))
        < wrapClientId(CLIENTID1) : WrappedClient | pendingMsg: (to SERVERID1 from CLIENTID1 : (msgSeq: N1, ATTRS2)), setTimeout: false, ATTRS1 > .

    --- Matches timeout messages when we have a pending message. Discards the timeout if it is for an old message.
    --- A message is not removed from pending until its corresponding response is received to allow for the server
    --- dropping messages.
    rl [client-rcv-timeout-1] : (to wrapClientId(CLIENTID1) from wrapClientId(CLIENTID1) : timeout with (msgSeq: N1))
        < wrapClientId(CLIENTID1) : WrappedClient | pendingMsg: (to SERVERID1 from CLIENTID1 : (msgSeq: N2, ATTRS2)), sendMsg: B1, cookie: CLIENTCOOKIEPAIR, ATTRS1 > =>
            if N1 == N2 then
                (to wrapServerId(SERVERID1) from wrapClientId(CLIENTID1) : connect) 
                < wrapClientId(CLIENTID1) : WrappedClient | pendingMsg: (to SERVERID1 from CLIENTID1 : (msgSeq: N2, ATTRS2)), sendMsg: true, cookie: cookieNone, ATTRS1 >
            else
                < wrapClientId(CLIENTID1) : WrappedClient | pendingMsg: (to SERVERID1 from CLIENTID1 : (msgSeq: N2, ATTRS2)), sendMsg: B1, cookie: CLIENTCOOKIEPAIR, ATTRS1 >
            fi .
    
    --- Rule for when we get a stale timeout while having no pending messages.
    rl [client-rcv-timeout-2] : (to wrapClientId(CLIENTID1) from wrapClientId(CLIENTID1) : timeout with (msgSeq: N1))
        < wrapClientId(CLIENTID1) : WrappedClient | pendingMsg: msgNone, ATTRS1 > =>
            < wrapClientId(CLIENTID1) : WrappedClient | pendingMsg: msgNone, ATTRS1 > .

    --- Always returns a cookie for each request. However, the server has a limited capacity for cookies
    --- and will make room if necessary by removing the cookie with the lowest weight (weight is incremented for each
    --- successful data request).
    --- crl [server-rcv-connect-req-client] : (to WRAPPEDSERVERID1, connect from WRAPPEDCLIENTID1) < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, maxCookies: N1, seed: N2, ATTRS1 > => 
    ---     *** Handles spurious request where server already has cookie for client. Returns existing cookie.
    ---     if WRAPPEDCLIENTID1 cIn COOKIELIST =/= noCookie then 
    ---         (to WRAPPEDCLIENTID1, accept with (WRAPPEDCLIENTID1 cIn COOKIELIST) from WRAPPEDSERVERID1)
    ---         < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, maxCookies: N1, seed: N2, ATTRS1 >
    ---     else
    ---         (to WRAPPEDCLIENTID1, accept with natToCookie(N2) from WRAPPEDSERVERID1)
    ---         if len(COOKIELIST) >= N1 then
    ---             < WRAPPEDSERVERID1 : WrappedServer | storedCookies: sortedInsert((WRAPPEDCLIENTID1, natToCookie(N2), 1), popMin(COOKIELIST)), maxCookies: N1, seed: s(N2), ATTRS1 >
    ---         else
    ---             < WRAPPEDSERVERID1 : WrappedServer | storedCookies: sortedInsert((WRAPPEDCLIENTID1, natToCookie(N2), 1), COOKIELIST), maxCookies: N1, seed: s(N2), ATTRS1 >
    ---         fi
    ---     fi if not WRAPPEDCLIENTID1 :: MaliciousWrappedClientId .

    --- Variant for handling messages from attacker. Because Actors2PMaude requires that messages cannot be directed to non-existent objects but the attacker
    --- needs to forge its messages' from ID to take up more than one slot in the server cookie table, we model this on the server side by just updating
    --- the cookie table but not actually sending a response message for attacker connect requests. 
    --- crl [server-rcv-connect-req-attacker] : (to WRAPPEDSERVERID1, connect from WRAPPEDCLIENTID1) < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, maxCookies: N1, seed: N2, ATTRS1 > => 
    ---     *** Handles spurious request where server already has cookie for client.
    ---     if WRAPPEDCLIENTID1 cIn COOKIELIST =/= noCookie then 
    ---         < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, maxCookies: N1, seed: N2, ATTRS1 >
    ---     else
    ---         if len(COOKIELIST) >= N1 then
    ---             < WRAPPEDSERVERID1 : WrappedServer | storedCookies: sortedInsert((WRAPPEDCLIENTID1, natToCookie(N2), 1), popMin(COOKIELIST)), maxCookies: N1, seed: s(N2), ATTRS1 >
    ---         else
    ---             < WRAPPEDSERVERID1 : WrappedServer | storedCookies: sortedInsert((WRAPPEDCLIENTID1, natToCookie(N2), 1), COOKIELIST), maxCookies: N1, seed: s(N2), ATTRS1 >
    ---         fi
    ---     fi 
    --- if WRAPPEDCLIENTID1 :: MaliciousWrappedClientId .

    --- Handles spurious request where server already has cookie for client. Returns existing cookie.
    crl [server-rcv-spurious-connect-req-client] : (to WRAPPEDSERVERID1 from WRAPPEDCLIENTID1 : connect) < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, ATTRS1 > => 
        (to WRAPPEDCLIENTID1 from WRAPPEDSERVERID1 : accept with (WRAPPEDCLIENTID1 cIn COOKIELIST))
        < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, ATTRS1 >
    if  (not(WRAPPEDCLIENTID1 :: MaliciousWrappedClientId)) /\ ((WRAPPEDCLIENTID1 cIn COOKIELIST) =/= noCookie) .

    --- Always returns a cookie for each request. However, the server has a limited capacity for cookies
    --- and will make room if necessary by removing the cookie with the lowest weight (weight is incremented for each
    --- successful data request).
    crl [server-rcv-new-connect-req-client] : (to WRAPPEDSERVERID1 from WRAPPEDCLIENTID1 : connect) < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, maxCookies: N1, seed: N2, ATTRS1 > => 
        (to WRAPPEDCLIENTID1 from WRAPPEDSERVERID1 : accept with natToCookie(N2))
        if len(COOKIELIST) >= N1 then
            < WRAPPEDSERVERID1 : WrappedServer | storedCookies: sortedInsert((WRAPPEDCLIENTID1, natToCookie(N2), 1), popMin(COOKIELIST)), maxCookies: N1, seed: s(N2), ATTRS1 >
        else
            < WRAPPEDSERVERID1 : WrappedServer | storedCookies: sortedInsert((WRAPPEDCLIENTID1, natToCookie(N2), 1), COOKIELIST), maxCookies: N1, seed: s(N2), ATTRS1 >
        fi
    if (not(WRAPPEDCLIENTID1 :: MaliciousWrappedClientId)) /\ ((WRAPPEDCLIENTID1 cIn COOKIELIST) == noCookie) .

    --- Variants for handling messages from attacker. Because Actors2PMaude requires that messages cannot be directed to non-existent objects but the attacker
    --- needs to forge its messages' from ID to take up more than one slot in the server cookie table, we model this on the server side by just updating
    --- the cookie table but not actually sending a response message for attacker connect requests. These are identical to the above rules except for not sending the accept.
    crl [server-rcv-spurious-connect-req-attacker] : (to WRAPPEDSERVERID1 from WRAPPEDCLIENTID1 : connect) < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, ATTRS1 > => 
        < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, ATTRS1 >
    if (WRAPPEDCLIENTID1 :: MaliciousWrappedClientId) /\ ((WRAPPEDCLIENTID1 cIn COOKIELIST) =/= noCookie) .
    
    crl [server-rcv-new-connect-req-attacker] : (to WRAPPEDSERVERID1 from WRAPPEDCLIENTID1 : connect) < WRAPPEDSERVERID1 : WrappedServer | storedCookies: COOKIELIST, maxCookies: N1, seed: N2, ATTRS1 > => 
        if len(COOKIELIST) >= N1 then
            < WRAPPEDSERVERID1 : WrappedServer | storedCookies: sortedInsert((WRAPPEDCLIENTID1, natToCookie(N2), 1), popMin(COOKIELIST)), maxCookies: N1, seed: s(N2), ATTRS1 >
        else
            < WRAPPEDSERVERID1 : WrappedServer | storedCookies: sortedInsert((WRAPPEDCLIENTID1, natToCookie(N2), 1), COOKIELIST), maxCookies: N1, seed: s(N2), ATTRS1 >
        fi
    if (WRAPPEDCLIENTID1 :: MaliciousWrappedClientId) /\ ((WRAPPEDCLIENTID1 cIn COOKIELIST) == noCookie) .

    --- Server wrapper deletes cookie before passing message along to core server when it receives a disconnect message.
    crl [server-rcv-disconnect-req] : (to wrapServerId(SERVERID1) from wrapClientId(CLIENTID1) : (msgCookie: K, ATTRS2)) < wrapServerId(SERVERID1) : WrappedServer | storedCookies: COOKIELIST, serverConf: SCONF1, ATTRS1 > =>
         < wrapServerId(SERVERID1) : WrappedServer | storedCookies: delCookieElem(wrapClientId(CLIENTID1), K, COOKIELIST),
            if wrapClientId(CLIENTID1) K in COOKIELIST then
                serverConf: (SCONF1 s; (to SERVERID1 from CLIENTID1 : ATTRS2))
            else
                serverConf: SCONF1
            fi,
        ATTRS1 > 
    if disconnect in ATTRS2 .

    --- Regular data requests get filtered out by the wrapper if the cookie does not match.
    crl [server-rcv-data-req] : (to wrapServerId(SERVERID1) from wrapClientId(CLIENTID1) : (msgCookie: K, ATTRS2)) < wrapServerId(SERVERID1) : WrappedServer | storedCookies: COOKIELIST, serverConf: SCONF1, ATTRS1 > =>
        if wrapClientId(CLIENTID1) K in COOKIELIST then 
            < wrapServerId(SERVERID1) : WrappedServer | storedCookies: incWeight(wrapClientId(CLIENTID1), K, COOKIELIST), serverConf: (SCONF1 s; (to SERVERID1 from CLIENTID1 : ATTRS2)), ATTRS1 >
        else
            < wrapServerId(SERVERID1) : WrappedServer | storedCookies: COOKIELIST, serverConf: SCONF1, ATTRS1 >
        fi
    if not(disconnect in ATTRS2) .

    rl [server-send-data] : < wrapServerId(SERVERID1) : WrappedServer | serverConf: ((to CLIENTID1 from SERVERID1 : ATTRS1) s; SCONF1), ATTRS2 > =>
        (to wrapClientId(CLIENTID1) from wrapServerId(SERVERID1) : ATTRS1)
        < wrapServerId(SERVERID1) : WrappedServer | serverConf: SCONF1, ATTRS2 > .


    --- Sends a new connection request and then prepares attacker to set a timeout for the next one.
    rl [attacker-send-req] : < ATTACKERID : Attacker | sendMsg: true, setTimeout: B1, server: SERVERID1, msgsRemaining: s(N1), ATTRS1 > =>
        (to wrapServerId(SERVERID1) from A(s(N1)) : connect)
        < ATTACKERID : Attacker | sendMsg: false, setTimeout: true, server: SERVERID1, msgsRemaining: N1, ATTRS1 > .

    --- Ignore server responses.
    rl [attacker-rcv] : (to ATTACKERID from wrapServerId(SERVERID1) : accept with K) < ATTACKERID : Attacker | ATTRS1 > =>
        < ATTACKERID : Attacker | ATTRS1 > .

    rl [attacker-set-timeout] : < ATTACKERID : Attacker | setTimeout: true, ATTRS1 > =>
        (to ATTACKERID from ATTACKERID : timeout with mt)
        < ATTACKERID : Attacker | setTimeout: false, ATTRS1 > .
    
    rl [attacker-rcv-timeout] : (to ATTACKERID from ATTACKERID : timeout with mt) < ATTACKERID : Attacker | sendMsg: B1, ATTRS1 > =>
        < ATTACKERID : Attacker | sendMsg: true, ATTRS1 > .
endm

--- set print color on .
--- set trace on .
--- set trace eq off .
--- set trace condition off .
--- set trace substitution off . 

--- --- Test one client, one server.
--- frewrite < wrapClientId(C 1) : WrappedClient | cookie: cookieNone, pendingMsg: msgNone, sendMsg: false, setTimeout: false, clientConf: C< C 1 : Client | server: S 1, seq: 0, ack: 0, maxSeq: 3 > > 
--- < wrapServerId(S 1) : WrappedServer | storedCookies: nil, maxCookies: 1, seed: 42, serverConf: S< S 1 : Server | mt > > .

--- --- Test two clients, one server, enough cookies for both.
--- frewrite < wrapClientId(C 1) : WrappedClient | cookie: cookieNone, pendingMsg: msgNone, sendMsg: false, setTimeout: false, clientConf: C< C 1 : Client | server: S 1, seq: 0, ack: 0, maxSeq: 3 > > 
---     < wrapClientId(C 2) : WrappedClient | cookie: cookieNone, pendingMsg: msgNone, sendMsg: false, setTimeout: false, clientConf: C< C 2 : Client | server: S 1, seq: 0, ack: 0, maxSeq: 10 > > 
---     < wrapServerId(S 1) : WrappedServer | storedCookies: nil, maxCookies: 2, seed: 42, serverConf: S< S 1 : Server | none > > .

--- frewrite < A 1 : Attacker | sendMsg: true, setTimeout: false, server: S 1, msgsRemaining: 3 >
--- < wrapServerId(S 1) : WrappedServer | storedCookies: nil, maxCookies: 4, seed: 42, serverConf: S< S 1 : Server | none > > .



--- Verify that no weird end states occur for one client and one server.
--- search < wrapClientId(C 1) : WrappedClient | cookie: cookieNone, pendingMsg: msgNone, sendMsg: false, setTimeout: false, clientConf: C< C 1 : Client | server: S 1, seq: 0, ack: 0, maxSeq: 3 > > 
---     < wrapServerId(S 1) : WrappedServer | storedCookies: nil, maxCookies: 1, seed: 42, serverConf: S< S 1 : Server | none > >
---         =>! < wrapClientId(C 1) : WrappedClient | cookie: CLIENTCOOKIEPAIR, pendingMsg: MSG1, clientConf: C< C 1 : Client | server: S 1, seq: N1, ack: N2, ATTRS1 > > C:Configuration 
---             s.t. (MSG1 =/= msgNone) or (N1 =/= 4) or (N2 =/= 4) or (CLIENTCOOKIEPAIR =/= cookieNone) .

--- TODO:
--- Is there a better way to produce cookies?
--- Does msgNone incorrectly get treated as a real message to deliver (see comment)?

--- red sortedInsert((wrapClientId(C 1), natToCookie(42), 5), (wrapClientId(C 2), natToCookie(43), 1) . ((wrapClientId(C 3), natToCookie(44), 4) . nil)) .
--- red delCookieElem(wrapClientId(C 1), natToCookie(42), (wrapClientId(C 2), natToCookie(43), 1) . ((wrapClientId(C 3), natToCookie(44), 4) . nil)) .
--- red len((wrapClientId(C 2), natToCookie(43), 1) . (wrapClientId(C 3), natToCookie(44), 6) . nil) .

--- red incWeight(wrapClientId(C 1), natToCookie(42), (wrapClientId(C 1), natToCookie(42), 1) ; ((wrapClientId(C 3), natToCookie(44), 1) ; (wrapClientId(C 2), natToCookie(43), 4))) .

--- red wrapClientId(C 3) cIn ((wrapClientId(C 1), natToCookie(42), 1) ; ((wrapClientId(C 3), natToCookie(44), 1) ; (wrapClientId(C 2), natToCookie(43), 4))) .
--- red wrapClientId(C 10) cIn ((wrapClientId(C 1), natToCookie(42), 1) ; ((wrapClientId(C 3), natToCookie(44), 1) ; (wrapClientId(C 2), natToCookie(43), 4))) .